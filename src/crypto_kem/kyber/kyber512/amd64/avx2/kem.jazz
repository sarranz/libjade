require "indcpa.jinc"
from Jade require "common/tofromstack.jinc"
from Jade require "crypto_kem/kyber/common/amd64/avx2/verify.jinc"
from Jade require "crypto_kem/kyber/common/amd64/kem.jinc"

export fn jade_kem_kyber_kyber512_amd64_avx2_keypair_derand(#transient reg u64 public_key secret_key coins) -> #public reg u64
{
  reg u64 r ms;
  stack u8[2*KYBER_SYMBYTES] stack_coins;

  public_key = public_key;
  secret_key = secret_key;
  ms = #init_msf(); // This protects `__tostack`.
  stack_coins = __tostack64u8(stack_coins, coins);
  ms = __crypto_kem_keypair_derand_jazz(public_key, secret_key, stack_coins, ms);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_kyber_kyber512_amd64_avx2_keypair(#transient reg u64 public_key secret_key) -> #public reg u64
{
  reg u64 r ms;
  stack u8[2*KYBER_SYMBYTES] stack_coins;

  public_key = public_key;
  secret_key = secret_key;
  stack_coins = #randombytes(stack_coins);
  ms = #init_msf();
  ms = __crypto_kem_keypair_derand_jazz(public_key, secret_key, stack_coins, ms);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_kyber_kyber512_amd64_avx2_enc_derand(#transient reg u64 ciphertext shared_secret public_key coins) -> #public reg u64
{
  reg u64 r, ms;
  stack u8[KYBER_SYMBYTES] stack_coins;

  ciphertext = ciphertext;
  shared_secret = shared_secret;
  public_key = public_key;
  ms = #init_msf(); // This protects `__tostack`.
  stack_coins = __tostack32u8(stack_coins, coins);
  ms = __crypto_kem_enc_derand_jazz(ciphertext, shared_secret, public_key, stack_coins, ms);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_kyber_kyber512_amd64_avx2_enc(#transient reg u64 ciphertext shared_secret public_key) -> #public reg u64
{
  reg u64 r ms;
  stack u8[KYBER_SYMBYTES] stack_coins;

  ciphertext = ciphertext;
  shared_secret = shared_secret;
  public_key = public_key;
  stack_coins = #randombytes(stack_coins);
  ms = #init_msf();
  ms = __crypto_kem_enc_derand_jazz(ciphertext, shared_secret, public_key, stack_coins, ms);
  ?{}, r = #set0();
  return r;
}

export fn jade_kem_kyber_kyber512_amd64_avx2_dec(#transient reg u64 shared_secret ciphertext secret_key) -> #public reg u64
{
  reg u64 r ms;
  ms = #init_msf();
  r = __crypto_kem_dec_jazz(shared_secret, ciphertext, secret_key, ms);
  ?{}, r = #set0();
  return r;
}
